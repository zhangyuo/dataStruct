#!/usr/bin/env python
# coding:utf-8
"""
# @Time     : 2020-03-24 10:12
# @Author   : Zhangyu
# @Email    : zhangycqupt@163.com
# @File     : 5_red_black_tree.py
# @Software : PyCharm
# @Desc     :
"""

"""
红黑树：

是一种这种的自平衡的二叉查找树。

1、为什么有了平衡二叉树，还要红黑树？
虽然平衡树解决了二叉查找树退化为近似链表的缺点，能够把查找时间控制在 O(logn)，不过却不是最佳的，因为平衡树要求每个节点的左子树和右子树
的高度差至多等于1，这个要求实在是太严了，导致每次进行插入/删除节点的时候，几乎都会破坏平衡树的第二个规则，进而我们都需要通过左旋和右旋来
进行调整，使之再次成为一颗符合要求的平衡树。
显然，如果在那种插入、删除很频繁的场景中，平衡树需要频繁着进行调整，这会使平衡树的性能大打折扣，为了解决这个问题，于是有了红黑树。

在查找方面的效率的话，平衡树比红黑树快。因为顺序插入同样会使得红黑树的节点有右倾的趋势，虽然远没有二叉树那般夸张的退化为线性表，其大大降低了树的高度。
所以，我们也可以说，红黑树是一种不大严格的平衡树。也可以说是一个折中的方案。

2、红黑树应用场景：
JDK的集合类 中的 TreeMap、TreeSet，JDK 1.8 中的 HashMap。
C++ STL 中的 map
Linux中的epoll模型
nginx中的Timer管理

3、构建一棵节点个数为 n 的红黑树，时间复杂度是：
查找：O(logn)
插入：O(logn)
删除：O(logn)

4、红黑树性质：
(1)节点是红色或黑色。
(2)根节点是黑色。
(3)每个叶子节点都是黑色的空节点（NIL节点）。
(4)每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)
(5)从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。

---->
（1）红黑树从根到叶子的最长路径不超过最短路径的2倍


"""

from tree.tree_node import TreeNode

class RBTree(object):
    pass


if __name__ == '__main__':
    pass
